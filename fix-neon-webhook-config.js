/**
 * Correction de la configuration webhook Neon + Stack Auth
 */

require('dotenv').config();
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixNeonWebhookConfig() {
  console.log('üîß Correction de la configuration webhook Neon + Stack Auth\n');

  try {
    // 1. Diagnostic du probl√®me
    console.log('1. Probl√®me identifi√©:');
    console.log('   ‚ùå Webhook configur√© pour Neon Console au lieu de votre app');
    console.log('   ‚ùå URL actuelle: https://console.neon.tech/webhook/stack');
    console.log('   ‚úÖ URL requise: http://localhost:3000/api/webhooks/stack\n');

    // 2. Solutions possibles
    console.log('2. Solutions possibles:\n');

    console.log('   üéØ SOLUTION A - Reconfigurer le webhook (Recommand√©e):');
    console.log('   1. Allez sur https://app.stack-auth.com/');
    console.log(`   2. S√©lectionnez votre projet: ${process.env.NEXT_PUBLIC_STACK_PROJECT_ID}`);
    console.log('   3. Allez dans "Webhooks"');
    console.log('   4. Trouvez le webhook existant (Neon)');
    console.log('   5. Modifiez l\'URL vers: http://localhost:3000/api/webhooks/stack');
    console.log('   6. V√©rifiez que les events sont bien coch√©s:');
    console.log('      - user.created ‚úÖ');
    console.log('      - user.updated ‚úÖ');
    console.log('      - user.deleted ‚úÖ');
    console.log('   7. Sauvegardez\n');

    console.log('   üéØ SOLUTION B - Cr√©er un nouveau webhook:');
    console.log('   1. Allez sur https://app.stack-auth.com/');
    console.log('   2. Dans "Webhooks", cliquez "Add Webhook"');
    console.log('   3. URL: http://localhost:3000/api/webhooks/stack');
    console.log('   4. Events: user.created, user.updated, user.deleted');
    console.log('   5. Copiez le nouveau secret dans votre .env\n');

    console.log('   üéØ SOLUTION C - Synchronisation manuelle (Temporaire):');
    console.log('   1. Je peux cr√©er un script pour synchroniser les utilisateurs');
    console.log('   2. R√©cup√®re les utilisateurs de Stack Auth');
    console.log('   3. Les cr√©e dans votre table User avec plan/r√¥le\n');

    // 3. V√©rifier l'utilisateur r√©cent
    console.log('3. V√©rification de l\'utilisateur r√©cent:');
    
    // Simuler la r√©cup√©ration des utilisateurs Stack Auth (normalement via API)
    console.log('   üí° L\'utilisateur que vous venez de cr√©er existe dans:');
    console.log('   ‚úÖ Table Stack Auth (dans Neon)');
    console.log('   ‚úÖ Dashboard Stack Auth');
    console.log('   ‚ùå Votre table User (manquante)');
    console.log('   ‚ùå Pas de plan ni r√¥le attribu√©\n');

    // 4. Test de l'endpoint local
    console.log('4. Test de votre endpoint webhook:');
    try {
      const response = await fetch('http://localhost:3000/api/webhooks/stack', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ test: true })
      });

      if (response.status === 400) {
        console.log('   ‚úÖ Endpoint accessible et fonctionnel');
      } else {
        console.log(`   ‚ö†Ô∏è  R√©ponse: ${response.status}`);
      }
    } catch (error) {
      console.log('   ‚ùå Endpoint non accessible');
      console.log('   üí° V√©rifiez que `npm run dev` est en cours');
    }

    // 5. Prochaines √©tapes
    console.log('\n5. Prochaines √©tapes:');
    console.log('   1. Choisissez une solution (A, B ou C)');
    console.log('   2. Si Solution A/B: Reconfigurez le webhook');
    console.log('   3. Si Solution C: Tapez "sync" pour synchroniser manuellement');
    console.log('   4. Testez avec un nouveau compte\n');

    console.log('üéØ Quelle solution pr√©f√©rez-vous ?');
    console.log('   - Tapez "webhook" pour les instructions d√©taill√©es');
    console.log('   - Tapez "sync" pour la synchronisation manuelle');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixNeonWebhookConfig();