/**
 * Test du flux d'inscription complet avec Stack Auth
 * Ce script simule une inscription r√©elle et v√©rifie la synchronisation
 */

require('dotenv').config();
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testSignupFlow() {
  console.log('üîÑ Test du flux d\'inscription complet\n');

  try {
    // 1. V√©rifier l'√©tat initial
    console.log('1. √âtat initial de la base de donn√©es:');
    const initialUserCount = await prisma.user.count();
    console.log(`   Utilisateurs actuels: ${initialUserCount}`);

    // Lister les utilisateurs existants
    const existingUsers = await prisma.user.findMany({
      select: { id: true, email: true, name: true },
      take: 5
    });
    
    console.log('   Utilisateurs existants:');
    existingUsers.forEach(user => {
      console.log(`   - ${user.id}: ${user.email || 'Pas d\'email'} (${user.name || 'Pas de nom'})`);
    });

    // 2. Instructions pour tester l'inscription
    console.log('\n2. Instructions pour tester l\'inscription:');
    console.log('   a) Ouvrez votre navigateur sur http://localhost:3000');
    console.log('   b) Allez sur la page d\'inscription (/auth/signup)');
    console.log('   c) Cr√©ez un nouveau compte avec un email unique');
    console.log('   d) Revenez ici et appuyez sur Entr√©e pour v√©rifier');

    // Attendre l'input utilisateur
    console.log('\n   ‚è≥ Cr√©ez votre compte puis appuyez sur Entr√©e...');
    
    // Simuler l'attente (en production, vous feriez une vraie pause)
    await new Promise(resolve => {
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      
      rl.question('Appuyez sur Entr√©e apr√®s avoir cr√©√© votre compte...', () => {
        rl.close();
        resolve();
      });
    });

    // 3. V√©rifier les nouveaux utilisateurs
    console.log('\n3. V√©rification apr√®s inscription:');
    const finalUserCount = await prisma.user.count();
    console.log(`   Utilisateurs maintenant: ${finalUserCount}`);
    
    if (finalUserCount > initialUserCount) {
      console.log(`   ‚úÖ ${finalUserCount - initialUserCount} nouvel(s) utilisateur(s) cr√©√©(s) !`);
      
      // Afficher les nouveaux utilisateurs
      const newUsers = await prisma.user.findMany({
        include: {
          plan: true,
          roles: {
            include: {
              role: true
            }
          },
          preferences: true
        },
        orderBy: { createdAt: 'desc' },
        take: finalUserCount - initialUserCount
      });

      console.log('\n   D√©tails des nouveaux utilisateurs:');
      newUsers.forEach(user => {
        console.log(`   üìã Utilisateur: ${user.id}`);
        console.log(`      Email: ${user.email || 'Non d√©fini'}`);
        console.log(`      Nom: ${user.name || 'Non d√©fini'}`);
        console.log(`      Plan: ${user.plan?.name || 'Aucun plan'}`);
        console.log(`      R√¥les: ${user.roles.map(ur => ur.role.name).join(', ') || 'Aucun r√¥le'}`);
        console.log(`      Pr√©f√©rences: ${user.preferences ? 'Cr√©√©es' : 'Non cr√©√©es'}`);
        console.log(`      Cr√©√© le: ${user.createdAt}`);
        console.log('');
      });
    } else {
      console.log('   ‚ùå Aucun nouvel utilisateur d√©tect√©');
      console.log('   üí° V√©rifiez que:');
      console.log('      - Le webhook est configur√© dans Stack Auth');
      console.log('      - L\'URL du webhook est correcte');
      console.log('      - Le secret webhook est valide');
      console.log('      - Votre serveur Next.js est d√©marr√©');
    }

    // 4. V√©rifier les logs du webhook
    console.log('\n4. V√©rification des logs:');
    console.log('   üí° Consultez les logs de votre serveur Next.js pour voir si le webhook a √©t√© appel√©');
    console.log('   üí° Recherchez des messages comme "webhook_received" ou "user_created"');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testSignupFlow();