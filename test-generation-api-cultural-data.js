/**
 * Script de test pour v√©rifier que l'API de g√©n√©ration retourne bien les donn√©es culturelles
 */

const fetch = require('node-fetch');

// Configuration
const API_URL = 'http://localhost:3000';
const TEST_BRIEF = {
  brief: "Cr√©er des personas pour une application de fitness destin√©e aux jeunes professionnels urbains de 25-35 ans qui cherchent √† maintenir un mode de vie sain malgr√© un emploi du temps charg√©."
};

async function testGenerationAPI() {
  console.log('üß™ TEST: API de g√©n√©ration des personas avec donn√©es culturelles\n');
  
  try {
    console.log('üì§ Envoi de la requ√™te √† l\'API...');
    console.log('Brief:', TEST_BRIEF.brief);
    
    const response = await fetch(`${API_URL}/api/generate-personas`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(TEST_BRIEF)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('‚úÖ R√©ponse re√ßue avec succ√®s');
    
    // Analyser la r√©ponse
    console.log('\nüìä Analyse de la r√©ponse:');
    console.log(`- Succ√®s: ${data.success}`);
    console.log(`- Nombre de personas: ${data.personas?.length || 0}`);
    console.log(`- Sources: Gemini=${data.sources?.gemini}, Qloo=${data.sources?.qloo}`);
    console.log(`- Timestamp: ${data.timestamp}`);
    
    if (data.personas && data.personas.length > 0) {
      console.log('\nüîç Analyse des personas g√©n√©r√©es:');
      
      data.personas.forEach((persona, index) => {
        console.log(`\nüë§ Persona ${index + 1}: ${persona.name}`);
        console.log(`   - √Çge: ${persona.age}`);
        console.log(`   - Profession: ${persona.occupation}`);
        console.log(`   - Localisation: ${persona.location}`);
        
        // V√©rifier les donn√©es culturelles
        if (persona.culturalData) {
          console.log('   ‚úÖ Donn√©es culturelles pr√©sentes:');
          
          const categories = [
            'music', 'movies', 'tv', 'books', 'brands', 'restaurants',
            'travel', 'fashion', 'beauty', 'food', 'socialMedia'
          ];
          
          let totalCulturalElements = 0;
          let categoriesWithData = 0;
          
          categories.forEach(category => {
            const data = persona.culturalData[category];
            if (data && Array.isArray(data) && data.length > 0) {
              console.log(`     - ${category}: ${data.length} √©l√©ments (${data.slice(0, 2).join(', ')}${data.length > 2 ? '...' : ''})`);
              totalCulturalElements += data.length;
              categoriesWithData++;
            } else {
              console.log(`     - ${category}: ‚ùå manquant ou vide`);
            }
          });
          
          console.log(`   üìä Total: ${totalCulturalElements} √©l√©ments culturels dans ${categoriesWithData}/${categories.length} cat√©gories`);
          
          // √âvaluer la qualit√© des donn√©es culturelles
          if (categoriesWithData >= 8 && totalCulturalElements >= 20) {
            console.log('   üéâ EXCELLENT: Donn√©es culturelles riches et compl√®tes');
          } else if (categoriesWithData >= 5 && totalCulturalElements >= 10) {
            console.log('   ‚úÖ BON: Donn√©es culturelles suffisantes');
          } else if (categoriesWithData >= 3) {
            console.log('   ‚ö†Ô∏è MOYEN: Donn√©es culturelles partielles');
          } else {
            console.log('   ‚ùå FAIBLE: Donn√©es culturelles insuffisantes');
          }
        } else {
          console.log('   ‚ùå Aucune donn√©e culturelle');
        }
        
        // V√©rifier d'autres champs importants
        console.log(`   - Points de douleur: ${persona.painPoints?.length || 0} √©l√©ments`);
        console.log(`   - Objectifs: ${persona.goals?.length || 0} √©l√©ments`);
        console.log(`   - Score qualit√©: ${persona.qualityScore || 'N/A'}`);
      });
      
      // R√©sum√© global
      const totalPersonas = data.personas.length;
      const personasWithCulturalData = data.personas.filter(p => p.culturalData && Object.keys(p.culturalData).length > 0).length;
      
      console.log('\nüìà R√âSUM√â GLOBAL:');
      console.log(`- Personas g√©n√©r√©es: ${totalPersonas}`);
      console.log(`- Personas avec donn√©es culturelles: ${personasWithCulturalData}/${totalPersonas}`);
      
      if (personasWithCulturalData === totalPersonas) {
        console.log('üéâ SUCC√àS: Toutes les personas ont des donn√©es culturelles !');
      } else if (personasWithCulturalData > 0) {
        console.log('‚ö†Ô∏è PARTIEL: Certaines personas manquent de donn√©es culturelles');
      } else {
        console.log('‚ùå √âCHEC: Aucune persona n\'a de donn√©es culturelles');
      }
      
    } else {
      console.log('‚ùå Aucune persona g√©n√©r√©e');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° Suggestion: Assurez-vous que le serveur Next.js est d√©marr√© (npm run dev)');
    }
  }
}

// Test des APIs individuelles
async function testIndividualAPIs() {
  console.log('\nüîß TEST: APIs individuelles\n');
  
  // Test Gemini API
  try {
    console.log('üì§ Test de l\'API Gemini...');
    const geminiResponse = await fetch(`${API_URL}/api/gemini`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(TEST_BRIEF)
    });
    
    if (geminiResponse.ok) {
      const geminiData = await geminiResponse.json();
      console.log(`‚úÖ Gemini: ${geminiData.personas?.length || 0} personas g√©n√©r√©es`);
    } else {
      console.log(`‚ùå Gemini: Erreur ${geminiResponse.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Gemini: ${error.message}`);
  }
  
  // Test Qloo API avec des personas de test
  try {
    console.log('üì§ Test de l\'API Qloo...');
    const testPersonas = [
      {
        name: 'Test User',
        age: 28,
        occupation: 'D√©veloppeur',
        location: 'Paris'
      }
    ];
    
    const qlooResponse = await fetch(`${API_URL}/api/qloo`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ personas: testPersonas })
    });
    
    if (qlooResponse.ok) {
      const qlooData = await qlooResponse.json();
      console.log(`‚úÖ Qloo: ${qlooData.personas?.length || 0} personas enrichies`);
      
      if (qlooData.personas?.[0]?.culturalData) {
        const culturalCategories = Object.keys(qlooData.personas[0].culturalData).length;
        console.log(`   - ${culturalCategories} cat√©gories culturelles ajout√©es`);
      }
    } else {
      console.log(`‚ùå Qloo: Erreur ${qlooResponse.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Qloo: ${error.message}`);
  }
}

// Ex√©cuter les tests
async function runAllTests() {
  await testGenerationAPI();
  await testIndividualAPIs();
  console.log('\nüèÅ Tous les tests termin√©s');
}

runAllTests();