// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Persona {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  name              String
  age               Int
  occupation        String
  location          String
  demographics      Json
  psychographics    Json
  culturalData      Json
  painPoints        String[]
  goals             String[]
  marketingInsights Json
  qualityScore      Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Role {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  roles       RolePermission[]
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, roleId])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Plan {
  id           String    @id @default(uuid())
  name         String    @unique
  monthlyPrice String
  annualPrice  String
  period       String
  description  String
  features     String[]
  cta          String
  ctaLink      String
  popular      Boolean
  color        String
  personasLimit Int?
  exports      String[]
  support      String
  apiAccess    Boolean
  culturalInsights Boolean
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  users        User[]
}

model User {
  id          String            @id @default(uuid())
  email       String            @unique
  name        String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  roles       UserRole[]
  planId      String?
  plan        Plan?             @relation(fields: [planId], references: [id])
  personas    Persona[]
  preferences UserPreferences?
  briefs      SavedBrief[]
}

model UserPreferences {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  theme            String   @default("light")
  language         String   @default("fr")
  autoSave         Boolean  @default(true)
  generationsCount Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model SavedBrief {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


