// Test pour v√©rifier si l'API retourne bien les donn√©es culturelles
const fetch = require('node-fetch');

async function testCulturalDataAPI() {
  console.log('=== TEST API DONN√âES CULTURELLES ===\n');
  
  const baseUrl = 'http://localhost:3000';
  const testBrief = 'Application mobile de fitness pour jeunes professionnels urbains';
  
  try {
    console.log('1. Test de l\'API Gemini seule:');
    const geminiResponse = await fetch(`${baseUrl}/api/gemini`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        brief: testBrief
      })
    });
    
    if (geminiResponse.ok) {
      const geminiData = await geminiResponse.json();
      console.log('   ‚úÖ API Gemini r√©pond');
      console.log('   Nombre de personas:', geminiData.personas?.length || 0);
      
      if (geminiData.personas && geminiData.personas.length > 0) {
        const firstPersona = geminiData.personas[0];
        console.log('   Premier persona:', firstPersona.name);
        
        if (firstPersona.culturalData) {
          console.log('   ‚úÖ culturalData pr√©sent dans la r√©ponse Gemini');
          const culturalKeys = Object.keys(firstPersona.culturalData);
          culturalKeys.forEach(key => {
            const data = firstPersona.culturalData[key];
            if (Array.isArray(data) && data.length > 0) {
              console.log(`     - ${key}: ${data.length} √©l√©ments`);
            }
          });
        } else {
          console.log('   ‚ùå culturalData manquant dans la r√©ponse Gemini');
        }
      }
    } else {
      console.log('   ‚ùå Erreur API Gemini:', geminiResponse.status);
    }
    
    console.log('\n2. Test de l\'API Qloo seule:');
    // Cr√©er un persona de test pour Qloo
    const testPersona = {
      id: 'test-123',
      name: 'Test User',
      age: 28,
      occupation: 'Marketing Manager',
      location: 'Paris, France',
      psychographics: {
        interests: ['fitness', 'technology', 'travel']
      }
    };
    
    const qlooResponse = await fetch(`${baseUrl}/api/qloo`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        personas: [testPersona]
      })
    });
    
    if (qlooResponse.ok) {
      const qlooData = await qlooResponse.json();
      console.log('   ‚úÖ API Qloo r√©pond');
      console.log('   Nombre de personas enrichis:', qlooData.personas?.length || 0);
      
      if (qlooData.personas && qlooData.personas.length > 0) {
        const enrichedPersona = qlooData.personas[0];
        console.log('   Persona enrichi:', enrichedPersona.name);
        
        if (enrichedPersona.culturalData) {
          console.log('   ‚úÖ culturalData ajout√© par Qloo');
          const culturalKeys = Object.keys(enrichedPersona.culturalData);
          culturalKeys.forEach(key => {
            const data = enrichedPersona.culturalData[key];
            if (Array.isArray(data) && data.length > 0) {
              console.log(`     - ${key}: ${data.length} √©l√©ments - [${data.slice(0, 2).join(', ')}...]`);
            }
          });
        } else {
          console.log('   ‚ùå culturalData manquant apr√®s enrichissement Qloo');
        }
      }
    } else {
      console.log('   ‚ùå Erreur API Qloo:', qlooResponse.status);
      const errorText = await qlooResponse.text();
      console.log('   D√©tails:', errorText.substring(0, 200));
    }
    
    console.log('\n3. Test de l\'API compl√®te generate-personas:');
    const generateResponse = await fetch(`${baseUrl}/api/generate-personas`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        brief: testBrief
      })
    });
    
    if (generateResponse.ok) {
      const generateData = await generateResponse.json();
      console.log('   ‚úÖ API generate-personas r√©pond');
      console.log('   Nombre de personas finaux:', generateData.personas?.length || 0);
      console.log('   Sources utilis√©es:', JSON.stringify(generateData.sources));
      
      if (generateData.personas && generateData.personas.length > 0) {
        const finalPersona = generateData.personas[0];
        console.log('   Persona final:', finalPersona.name);
        
        if (finalPersona.culturalData) {
          console.log('   ‚úÖ culturalData pr√©sent dans le r√©sultat final');
          const culturalKeys = Object.keys(finalPersona.culturalData);
          let totalItems = 0;
          
          culturalKeys.forEach(key => {
            const data = finalPersona.culturalData[key];
            if (Array.isArray(data) && data.length > 0) {
              console.log(`     - ${key}: ${data.length} √©l√©ments`);
              totalItems += data.length;
            }
          });
          
          console.log(`   üìä Total d'√©l√©ments culturels: ${totalItems}`);
          
          if (totalItems === 0) {
            console.log('   ‚ùå PROBL√àME: Aucune donn√©e culturelle dans le r√©sultat final !');
          }
          
        } else {
          console.log('   ‚ùå culturalData manquant dans le r√©sultat final');
        }
        
        // Afficher la structure compl√®te pour debug
        console.log('\n   Structure du persona final:');
        console.log('   Cl√©s:', Object.keys(finalPersona).join(', '));
        
      }
    } else {
      console.log('   ‚ùå Erreur API generate-personas:', generateResponse.status);
      const errorText = await generateResponse.text();
      console.log('   D√©tails:', errorText.substring(0, 200));
    }
    
  } catch (error) {
    console.log('‚ùå Erreur lors du test:', error.message);
  }
  
  console.log('\n=== R√âSUM√â ===');
  console.log('Ce test v√©rifie si les donn√©es culturelles sont:');
  console.log('1. G√©n√©r√©es par Gemini');
  console.log('2. Enrichies par Qloo');
  console.log('3. Pr√©sentes dans la r√©ponse finale');
  console.log('\nSi les donn√©es sont pr√©sentes dans l\'API mais pas dans l\'interface,');
  console.log('le probl√®me est dans la sauvegarde ou l\'affichage c√¥t√© client.');
}

// Ex√©cuter le test
if (require.main === module) {
  testCulturalDataAPI().catch(console.error);
}

module.exports = { testCulturalDataAPI };