/**
 * Test pour v√©rifier la source des donn√©es de r√©seaux sociaux
 * V√©rifie si elles proviennent de Qloo ou sont g√©n√©r√©es localement
 */

const fetch = require('node-fetch');

console.log('üîç TEST: Source des donn√©es de r√©seaux sociaux\n');

async function testSocialMediaSource() {
    // 1. Test direct de l'API Qloo pour voir si elle retourne des r√©seaux sociaux
    console.log('1Ô∏è‚É£ Test direct API Qloo pour les r√©seaux sociaux...');
    
    const qlooApiKey = process.env.QLOO_API_KEY;
    const qlooBaseUrl = process.env.QLOO_API_URL || 'https://hackathon.api.qloo.com';
    
    if (!qlooApiKey) {
        console.log('‚ùå Cl√© API Qloo manquante, impossible de tester');
        return;
    }

    try {
        // Essayer de r√©cup√©rer des donn√©es de r√©seaux sociaux via Qloo
        const socialMediaUrl = `${qlooBaseUrl}/v2/insights?filter.type=urn:entity:social_media&signal.demographics.audiences=millennials&take=5`;
        
        console.log('üì§ URL test√©e:', socialMediaUrl);
        
        const response = await fetch(socialMediaUrl, {
            headers: {
                'X-API-Key': qlooApiKey,
                'Content-Type': 'application/json'
            }
        });

        console.log('üì• Statut de r√©ponse:', response.status);
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Donn√©es re√ßues de Qloo pour social_media:');
            console.log(JSON.stringify(data, null, 2));
            
            const entities = data.results?.entities || [];
            if (entities.length > 0) {
                console.log('üéØ R√©seaux sociaux trouv√©s via Qloo:');
                entities.forEach((entity, index) => {
                    console.log(`   [${index}]: ${entity.name || entity.title}`);
                });
            } else {
                console.log('‚ùå Aucun r√©seau social trouv√© via Qloo');
            }
        } else {
            const errorText = await response.text();
            console.log('‚ùå Erreur API Qloo:', response.status, errorText);
            
            if (response.status === 400 && errorText.includes('does not yet support')) {
                console.log('üîç CONCLUSION: L\'API Qloo ne supporte pas les requ√™tes pour social_media');
            }
        }
    } catch (error) {
        console.error('‚ùå Erreur lors du test Qloo:', error.message);
    }

    console.log('\n2Ô∏è‚É£ Test de la fonction locale getSocialMediaByProfile...');
    
    // Simuler la fonction locale (copie du code)
    function getSocialMediaByProfile(age, occupation) {
        const baseSocialMedia = ['Instagram', 'LinkedIn'];

        if (!age) return [...baseSocialMedia, 'TikTok'];

        // Ajustements bas√©s sur l'√¢ge
        if (age < 30) {
            baseSocialMedia.push('TikTok', 'Snapchat');
        } else if (age < 40) {
            baseSocialMedia.push('TikTok', 'Twitter');
        } else {
            baseSocialMedia.push('Facebook', 'Twitter');
        }

        // Ajustements bas√©s sur la profession
        if (occupation?.toLowerCase().includes('d√©veloppeur') ||
            occupation?.toLowerCase().includes('tech')) {
            baseSocialMedia.push('GitHub', 'Reddit');
        } else if (occupation?.toLowerCase().includes('marketing') ||
            occupation?.toLowerCase().includes('communication')) {
            baseSocialMedia.push('Pinterest', 'Facebook');
        } else if (occupation?.toLowerCase().includes('designer') ||
            occupation?.toLowerCase().includes('cr√©atif')) {
            baseSocialMedia.push('Behance', 'Dribbble');
        }

        // Supprimer les doublons et retourner
        return Array.from(new Set(baseSocialMedia));
    }

    // Test avec diff√©rents profils
    const testProfiles = [
        { age: 25, occupation: 'D√©veloppeur' },
        { age: 35, occupation: 'Marketing Manager' },
        { age: 45, occupation: 'Designer' },
        { age: 28, occupation: 'Consultant' }
    ];

    console.log('üß™ R√©sultats de la fonction locale:');
    testProfiles.forEach((profile, index) => {
        const socialMedia = getSocialMediaByProfile(profile.age, profile.occupation);
        console.log(`   [${index}] ${profile.occupation}, ${profile.age} ans: ${socialMedia.join(', ')}`);
    });

    console.log('\n3Ô∏è‚É£ Comparaison avec les donn√©es de nos tests pr√©c√©dents...');
    
    // Donn√©es observ√©es dans nos tests pr√©c√©dents
    const observedSocialMedia = ['Instagram', 'LinkedIn', 'TikTok', 'Snapchat', 'Twitter', 'Facebook'];
    
    console.log('üìä R√©seaux sociaux observ√©s dans nos tests:', observedSocialMedia.join(', '));
    
    // Test si ces donn√©es correspondent √† la fonction locale
    const testResult = getSocialMediaByProfile(25, 'Designer');
    const matches = testResult.filter(item => observedSocialMedia.includes(item));
    
    console.log('üîç Correspondance avec fonction locale:', matches.join(', '));
    console.log(`üìà Taux de correspondance: ${matches.length}/${testResult.length} (${Math.round(matches.length/testResult.length*100)}%)`);

    console.log('\nüéØ CONCLUSION:');
    console.log('Les donn√©es de r√©seaux sociaux sont g√©n√©r√©es LOCALEMENT par getSocialMediaByProfile()');
    console.log('et ne proviennent PAS de l\'API Qloo.');
    console.log('Ceci explique pourquoi elles apparaissent m√™me quand Qloo √©choue.');
}

testSocialMediaSource().catch(console.error);